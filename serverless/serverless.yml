# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  profile: neelparikh.dev
  region: us-west-2
  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  newUser:
    handler: bin/postUserConfirmation
    events:
      - cognitoUserPool:
          pool: chatapp
          trigger: PostConfirmation
          existing: true

  # addFriend:
  #   handler: bin/addFriend
  #   events:
  #     - http:
  #         path: /users/{user_id}/friends/{friend_id}
  #         method: put
  #         cors: true

  # getUserFriends:
  #   handler: bin/getUserFriends
  #   events:
  #     - http:
  #         path: /users/{user_id}/friends/
  #         method: get
  #         cors: true
  


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
  ChatAppUserPools:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: chatapp
        AliasAttributes:
          - phone_number
          - email
          - preferred_username
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        Schema:
          - Name: email
            Required: True

  ChatAppUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: chatapp-client
        UserPoolId: 
          Ref: ChatAppUserPools
        SupportedIdentityProviders: 
          - COGNITO
        GenerateSecret: False
        CallbackURLs:
          - https://chatapp.neelparikh.net
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        AllowedOAuthFlowsUserPoolClient: True
  
  ChatAppDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: chatapp-test
      UserPoolId: 
          Ref: ChatAppUserPools


